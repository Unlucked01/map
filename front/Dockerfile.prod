# Build stage
FROM --platform=linux/amd64 node:20-alpine AS build-stage

WORKDIR /app

# Установка необходимых пакетов для сборки
RUN apk add --update --no-cache python3 make g++

# Копируем package files
COPY package*.json ./

# Полная переустановка зависимостей
RUN rm -rf node_modules package-lock.json && \
    npm install --production=false && \
    npm cache clean --force

# Копируем исходный код
COPY . .

# Собираем приложение (быстрая сборка без проверки типов)
RUN npm run build-fast

# Production stage
FROM --platform=linux/amd64 nginx:alpine AS production-stage

# Копируем собранное приложение
COPY --from=build-stage /app/dist /usr/share/nginx/html

# Копируем настройки Nginx для SPA
COPY --from=build-stage /app/nginx.conf /etc/nginx/conf.d/default.conf

# Создаем пользователя nginx (если не существует)
RUN addgroup -g 101 -S nginx || true
RUN adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx || true

# Настраиваем права доступа
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Создаем директории с правильными правами
RUN touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Переключаемся на nginx пользователя
USER nginx

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"] 